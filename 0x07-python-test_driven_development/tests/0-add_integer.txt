Module ``0-add_integer`` module
==============================

Using ``add_integer``
---------------------

Import function
        >>> add_integer = __import__("0-add_integer").add_integer

check module docstring
        >>> m = __import__("0-add_integer").__doc__
        >>> len(m) > 1
        True

check function docstring
        >>> f = __import__("0-add_integer").add_integer.__doc__
        >>> len(f) > 1
        True

check normal addition:
        >>> add_integer(7, 3)
        10

check negative sum:
        >>> add_integer(-15, 20)
        5

check float sum:
        >>> add_integer(1.99, 2.99)
        3

Check float and int:
	 >>> add_integer(3.5, 5)
	 8

Check int and float:
	 >>> add_integer(15, 1.8)
	 16

Checking for passed NaN:
	 >>> add_integer(1, float('nan'))
	 Traceback (most recent call last):
	 ...
	 ValueError: cannot convert float NaN to integer

Checking for passed inf:
	 >>> add_integer(1, float('inf'))
	 Traceback (most recent call last):
	 ...
	 OverflowError: cannot convert float infinity to integer

Checking super long int:
	 >>> add_integer(999999999999999999999999999999, 1)
	 1000000000000000000000000000000

Checking non-number with number:
	 >>> add_integer([1], 2)
	 Traceback (most recent call last):
	 ...
	 TypeError: a must be an integer

Checking number with non-number:
	 >>> add_integer(3, "2")
	 Traceback (most recent call last):
	 ...
	 TypeError: b must be an integer

Checking non-number with non-number:
	 >>> add_integer((2,), {"key": "value"})
         Traceback (most recent call last):
         ...
         TypeError: a must be an integer

Checking bool with number:
	 >>> add_integer(True, 1)
	 Traceback (most recent call last):
         ...
         TypeError: a must be an integer

Checking number with bool:
	 >>> add_integer(0, False)
         Traceback (most recent call last):
         ...
         TypeError: b must be an integer

Checking no args:
	 >>> add_integer()
	 Traceback (most recent call last):
	 ...
	 TypeError: add_integer() missing 2 required positional arguments: 'a' and 'b'

Checking one arg:
	 >>> add_integer(1)
	 Traceback (most recent call last):
         ...
	 TypeError: add_integer() missing 1 required positional argument: 'b'

Checking more than 2 args:
	 >>> add_integer(1, 2, 3)
         Traceback (most recent call last):
         ...
         TypeError: add_integer() takes 2 positional arguments but 3 were given

check type
        >>> add_integer(a, b=98):
        """ Doc """
        return int(a) + int(b)

check float overflow
        >>> add_integer(a, b=98):
        """ Doc """
        if a is None or (type(a) is not int and type(a) is not float):
                raise TypeError("a must be an integer")
        if type(b) is not int and type(b) is not float:
                raise TypeError("b must be an integer")
        result = a + b
        if result == float('inf') or result == -float('inf'):
                return 89
        return int(a) + int(b)
